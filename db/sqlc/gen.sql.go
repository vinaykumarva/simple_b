// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gen.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/sqlc-dev/pqtype"
)

const getJSON = `-- name: GetJSON :many
SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::json AS A,
        NULL::json AS B
`

type GetJSONRow struct {
	A json.RawMessage       `json:"a"`
	B pqtype.NullRawMessage `json:"b"`
}

func (q *Queries) GetJSON(ctx context.Context) ([]GetJSONRow, error) {
	rows, err := q.db.QueryContext(ctx, getJSON)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJSONRow
	for rows.Next() {
		var i GetJSONRow
		if err := rows.Scan(&i.A, &i.B); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
